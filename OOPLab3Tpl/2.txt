#include <iostream>
#include <stdexcept>
using namespace std;
class intOfLong {
public:
    intOfLong() : size(1), data(new int[size]()) {}
    intOfLong(size_t size) : size(size), data(new int[size]) {
        for (size_t i = 0; i < size; ++i) {
            data[i] = i;
        }
    }
    intOfLong(int size, int initializer) : size(size),
        data(new int[size]) {
        setAllTo(initializer);
    }
    intOfLong(const intOfLong& other) {
        copyFrom(other);
    }
    intOfLong& operator=(const intOfLong& other) {
        return copyFrom(other);
    }
    virtual ~intOfLong() {
        delete[] data;
    }
    int& get(size_t position) {
        if (position >= size) {
            throw out_of_range("index went out of range");
        }
        return data[position];
    }
    const int& get(size_t position) const {
        if (position >= size) {
            throw out_of_range("index went out of range");
        }
        return data[position];
    }
    void set(size_t position) {
        if (position >= size) {
            throw out_of_range("index went out of range");
        }
        data[position] = 0;
    }
    void set(size_t position, int value) {
        if (position >= size) {
            throw out_of_range("index went out of range");
        }
        data[position] = value;
    }
    size_t getSize() const { return size; }
    void setAllTo(int value) {
        for (size_t i = 0; i < size; ++i) {
            data[i] = value;
        }
    }
    intOfLong& copyFrom(const intOfLong& other) {
        if (this != &other) {
            size = other.size;
            delete[] data;
            data = new int[size];
            for (size_t i = 0; i < size; ++i) {
                data[i] = other.data[i];
            }
        }
        return *this;
    }
    static size_t getMaximumSize() { return static_cast<size_t>(-1); }
private:
    size_t size;
    int* data;
};

ostream& operator<<(ostream& stream, const intOfLong& v) {
    stream << "[";
    for (size_t i = 0; i < v.getSize(); ++i) {
        stream << v.get(i);
        if (i < v.getSize() - 1) stream << ", ";
    }
    return stream << "]";
}

int main(int argc, char* argv[]) {
    intOfLong v(10);
    v.set(9);
    v.set(3, 4);
    cout << v << endl;
    return 0;
}